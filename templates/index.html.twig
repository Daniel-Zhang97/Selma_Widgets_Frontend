{% extends 'base.html.twig' %}

{% block script %}

{#    google charts#}
    <script>
        let barGraphData = [['Fees Collected', 'Collected', 'Outstanding', 'Overdue',]];
        let chart = null;
        let pieChart = null;
        let barWidth = 300;

        // Bar chart functions
        function drawChart(inputData) {
            var data = google.visualization.arrayToDataTable(
                inputData
            );

            let options = {
                animation: {"startup": true,
                    duration: 500,
                    easing: 'inAndOut'},
                tooltip: {isHtml: true},
                width: barWidth,
                height: 200,
                legend: {position: 'none'},
                bar: {groupWidth: '75%'},
                isStacked: true,
                vAxis: {gridlines: {count: 4}, format: 'currency' },
                series: {
                    0: {color: '#37a2eb'},
                    1: {color: '#ff9f40'},
                    2: {color: '#ff6384'},
                },
                orientation: 'horizontal',
                backgroundColor: '#f9f6fa',
                chartArea: {left: 40, height:'60%', width:'80%'}

            }
            chart.draw(data, options);
        }

        function getData(initial = false) {
            const filterOptionsJSON = JSON.stringify(filterOptions);

            fetch('http://localhost:8001/request', {
                method: 'POST',
                body: filterOptionsJSON,
                headers: {
                    'Content-Type': 'application/json',
                },
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    barGraphData = [['Fees Collected', 'Collected', 'Outstanding', 'Overdue', 'Overpaid']]
                    return response.json();
                })
                .then(data => {
                    for (year in data) {
                        barGraphData.push(
                            [
                                year,
                                data[year]['Collected'],
                                data[year]['Uncollected'],
                                data[year]['Overdue'],
                                data[year]['Overpaid']
                            ]
                        );
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('responseContainer').textContent = 'Error: ' + error.message;
                })
                .then(() => {
                    drawChart(barGraphData);
                    if (initial == true) {
                        updatePieChart(barGraphData.length - 1)
                    }
                });
        }

        function areOptionsValid(initial = false) {
            if (!filterOptions['Collected'] && !filterOptions['Uncollected'] && !filterOptions['Overdue'] &&
                !filterOptions['Overpaid']) {
                console.log('invalid type options')
            } else {
                console.log(filterOptions)
                getData(true)
            }
        }

        // Pie Chart Functions
        function drawPieChart(inputData){
            var data = google.visualization.arrayToDataTable(
                inputData
            );

            let options = {
                pieHole: 0.47,
                pieSliceText: 'none',
                title: inputData[0][0],
                tooltip: { isHtml: true, trigger: 'selection' },
                width: 140,
                height: 140,
                legend: { position: 'bottom', alignment: 'center' },
                backgroundColor: '#f9f6fa',
                slices: {
                    0: { color: '#37a2eb' },
                    1: { color: '#ff9f40' },
                    2: { color: '#ff6384' },
                },
                chartArea: {left: 5, height: '60%', width: '100%' }
            };

            console.log('should work')
            pieChart.draw(data,options)

        }

        function updatePieChart(index) {
            let pieData = [[barGraphData[index][0], 'Collection Status']]
            for (i = 1; i < 4; i++) {
                pieData.push([barGraphData[0][i], barGraphData[index][i]])
            }
            drawPieChart(pieData)

        }

        // Universal chart functions



        // Initial request to get the graph data
        document.addEventListener('DOMContentLoaded', () => {
            google.charts.setOnLoadCallback(async function () {
                pieChart = new google.visualization.PieChart(document.getElementById('pie_chart'));
                chart = new google.visualization.BarChart(document.getElementById('chart_div'));
                google.visualization.events.addListener(chart, 'select', function(e) {
                    selectedRows = chart.getSelection('row');
                    if (selectedRows && selectedRows.length > 0) {
                        updatePieChart(selectedRows[0].row + 1)
                    }
                });
                areOptionsValid(true)
            });
        });

    </script>


    <script>
{#        initializing the dates#}
        var currentDate = new Date();
        var oneYearLater = new Date();
        var oneYearAgo = new Date();
        oneYearAgo.setFullYear(currentDate.getFullYear() - 1);
        oneYearLater.setFullYear(currentDate.getFullYear() + 1)
        var oneYearLaterFormatted = oneYearLater.toISOString().slice(0, 10);
        var oneYearAgoFormatted = oneYearAgo.toISOString().slice(0, 10);

        let filterOptions = {
            groupBy: 'Yearly',
            Collected: true,
            Uncollected: true,
            Overdue: true,
            Overpaid: true,
            startDate: oneYearAgoFormatted,
            endDate: oneYearLaterFormatted,
            generateReport: false,
        };

        {#    datepicker filter#}
        $(function() {
            $('#startDate').val(oneYearAgoFormatted);
            $('#endDate').val(oneYearLaterFormatted);

            $('.input-daterange').datepicker({
                format: 'yyyy-mm-dd',
                autoclose: true
            });

            $('#datepicker input').on('change', function() {
                var startDate = $('input[name="start"]').val();
                var endDate = $('input[name="end"]').val();

                filterOptions['startDate'] = startDate;
                filterOptions['endDate'] = endDate;
            });
        });

        // Type handler
        $(function () {
            $('.form-check-input').on('change', function () {
                filterOptions[this.value] = this.checked
            })
        })

        // Groupby Handler
        $(function () {
            $('.group-by-button').on('click', function () {
                $('.group-by-button').removeClass('selected-group');
                $(this).addClass('selected-group');
                filterOptions['groupBy'] = this.value;
            })
        })

        // Submit handler
        $(function() {
            $('#submit-button').on('click', function () {
                areOptionsValid()
            })
        })

        // Filter hide/show handler
        $(function () {
            $('.filter-expand-button').on('click', function () {
                if (barWidth == 300) {
                    barWidth = 188
                    $('#chart_div').toggleClass('mini-chart');
                    $('#revenue-right, #pie_chart, #pie-report-container').toggleClass('mega-chart')
                    drawChart(barGraphData)
                    setTimeout(function() {
                        $('#filter-options-container').toggleClass('hidden-filter');
                    }, 500)
                } else  {
                    $('#filter-options-container').toggleClass('hidden-filter');
                    setTimeout(function() {
                        barWidth = 300
                        $('#revenue-right, #pie_chart, #pie-report-container').toggleClass('mega-chart')
                        $('#chart_div').toggleClass('mini-chart');
                        drawChart(barGraphData)
                    }, 500)
                }


            });
        });

        // Generate Revenue Report handler
        $(function() {
            $('#generate-report').on('click', function() {
                const filterOptionsJSON = JSON.stringify(filterOptions);

                // Send a POST request to the Symfony controller to generate the report
                fetch('http://localhost:8002/revenue_report', {
                    method: 'POST',
                    body: filterOptionsJSON,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data.url)
                        const newTab = window.open(data.url, '_blank');
                        if (newTab) {
                            newTab.focus();
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
        });

    </script>

{% endblock %}


{% block body %}

{#    widget card#}
    <div class="p-0 m-5 widget-main-container">
{#        card title (Revenue by Year) #}
        <div class="w-100 widget-card-title">
            <h4 class="pt-2 mt-0 mb-2 ml-3 ">Revenue Breakdown</h4>
        </div>
    {#        card items#}
        <div id="revenue-widget-card" class="w-100 d-flex flex-row align-content-center p-0">
        {#            google chart drawn (left side of the card) #}
            <div id="chart_div" class="chart-container-default transition-5 z-2">
            </div>
        {#            Filter & data container (right side of the card) #}
            <div id="revenue-right" class="d-flex flex-column p-0 transition-5">
            {#                filter button/header#}
                <a class="filter-expand-button p-0 w-100 border-bottom-separator">
                    <div class=" d-flex flex-row justify-content-end
                    filter-expand-container my-auto">
                        <span class="align-self-center px-2">Filter
                            <i class="fa-solid fa-arrow-down-short-wide align-self-center"></i>
                        </span>
                    </div>
                </a>
            {#               Pie chart, generate report & filter options & data section#}
                <div class="h-100 ml-auto w-100">
                {# Pie chart section     && Generate report               #}
                    <div id="pie-report-container" class="d-flex flex-column position-absolute transition-5">
                        {#                        Pie chart#}
                        <div id="pie_chart" class="mx-auto flex-grow-1"></div>
                        {#                    Generate report#}
                        <a id="generate-report" class="generic-button ml-auto mt-auto pr-2
                         bg-selma w-100 d-flex flex-row justify-content-end flex-grow-1 border-top-separator">
                            <div class="my-auto">Generate Report</div>
                            <i class="fa-regular fa-file-lines my-auto pl-1"></i>
                        </a>
                    </div>
                {# filter options                #}
                    <div id="filter-options-container" class="position-relative ml-auto">
                        <div id="" class="bg-selma d-flex flex-column p-3 h-100">
                    {#                    date range container#}
                            <div class="h-33">
                                <div>
                                    Select Date Range:
                                </div>
                                <div class="input-daterange input-group" id="datepicker">
                                    <input type="text" class="input-sm form-control" name="start" id="startDate" placeholder="Start Date">
                                    <input type="text" class="input-sm form-control" name="end" id="endDate" placeholder="End Date">
                                </div>
                            </div>
                    {#                    type switches container#}
                            <div class="h-33 w-100 ">
                                <span class="h-25">
                                    Type:
                                </span>
                                <div class="form-check form-switch d-flex flex-row h-75 w-100 justify-content-between
                                 p-0">
                                    <div class="d-flex flex-column h-100 w-25">
                                        <label for="includeCollectedRevenue" class="my-1">Collected</label>
                                        <div>
                                            <input value="Collected" class="form-check-input toggle-switch-base m-0"
                                                   type="checkbox"
                                                   role="switch"
                                                   checked>
                                        </div>
                                    </div>
                                    <div class="d-flex flex-column h-100 w-25">
                                        <label for="" class="my-1">Uncollected</label>
                                        <div>
                                            <input value="Uncollected" class="form-check-input toggle-switch-base m-0 "
                                                   type="checkbox"
                                                   role="switch"
                                                   checked>
                                        </div>
                                    </div>
                                    <div class="d-flex flex-column h-100 w-25">
                                        <label for="" class="my-1">Overdue</label>
                                        <div>
                                            <input value="Overdue" class="form-check-input toggle-switch-base m-0"
                                                   type="checkbox"
                                                   role="switch"
                                                   checked>
                                        </div>
                                    </div>
                                    <div class="d-flex flex-column h-100 w-25">
                                        <label for="" class="my-1">Overpaid</label>
                                        <div>
                                            <input value="Overdue" class="form-check-input toggle-switch-base m-0"
                                                   type="checkbox"
                                                   role="switch"
                                                   checked>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    {#                    groupby and submit button#}
                            <div class="d-flex flex-row h-33">
                                <div class="d-flex flex-column">
                                    <span>
                                        Group By:
                                    </span>
                                    <div class="my-auto">
                                        <button class="toggle-button-base group-by-button " value="Monthly">Monthly</button>
                                        <button class="toggle-button-base group-by-button" value="Quarterly">Quarterly</button>
                                        <button class="toggle-button-base group-by-button selected-group" value="Yearly">Yearly</button>
                                    </div>
                                </div>
                                <button class="submit-button-base ml-auto" id="submit-button">
                                    Submit
                                </button>
                            </div>
                        </div>
                    </div>


                </div>
            </div>
        </div>
    </div>
{% endblock %}